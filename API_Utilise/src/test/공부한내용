
1. 네이버 지도 api를 이용한 정적지도 

->네이버 지도에서는 JavaScript를 사용하지 않고, 웹 페이지에서 네이버 지도를 이용해 쉽게 위치를 표시하고 안내할 수 있는 Static Map(정적 지도) 서비스를 제공합니다. 
   일단 정적지도를 호출하기에 앞서 네이버 클라우드 플랫폼에서 어플리케이션을 등록해야합니다. 그 후 네이버 MAP에서 Static Map 서비스를 등록해야합니다.
   등록이 끝난후 인증키와 비밀번호를 받습니다. https://api.ncloud-docs.com/docs/ai-naver-mapsstaticmap 에서 보여지듯, 
   정적 지도를 사용하기 위해선 인증방식이 두가지로 나뉩니다. ID-KEY 인증방식과 HTTP Referer인증 방식이 존재합니다.
  
 1-1) ID-KEY 기반 인증방식 
     
    curl "https://naveropenapi.apigw.ntruss.com/map-static/v2/raster?w=300&h=300&center=127.1054221,37.3591614&level=16" \
	-H "X-NCP-APIGW-API-KEY-ID: {애플리케이션 등록 시 발급받은 client id값}" \
	-H "X-NCP-APIGW-API-KEY: {애플리케이션 등록 시 발급받은 client secret값}" -v
	
	이런식으로 해당 인증키 아이디와 비밀번호를 적어 이미지를 불러오는 형식입니다.
	Advanced REST Client라는 프로그램을 이용하여 GET메소드로 
	URL -> https://naveropenapi.apigw.ntruss.com/map-static/v2/raster?w=300&h=300&center=127.1054221,37.3591614&level=16 로 설정후,
	헤더에 X-NCP-APIGW-API-KEY-ID 에 해당하는 아이디값, X-NCP-APIGW-API-KEY에 해당하는 비밀번호 값을 넣고 실행시 200코드와 함께 잘 작동됨을 보았습니다.
	
 1-2)  HTTP Referer인증 방식
 
 	브라우져에서 IMG 태그 또는 Ajax 방식으로 호출할 경우 아래 URL을 통해 호출할 수 있습니다. Referer인증을 위해서, 해당 Application에 Web 서비스 URL을 등록 하셔야 합니다.
 	이미지 방식으로 불러올 경우 요청헤더는 필요없으며 인증키 아이디값만 필요합니다.
 	ex) <img src="https://naveropenapi.apigw.ntruss.com/map-static/v2/raster-cors?w=300&h=300&center=127.1054221,37.3591614&level=16&X-NCP-APIGW-API-KEY-ID={애플리케이션 등록 시 발급받은 client id값}">
 	예를들어 id 값이 aa 라면
 	<img src="https://naveropenapi.apigw.ntruss.com/map-static/v2/raster-cors?w=300&h=300&center=127.1054221,37.3591614&level=16&X-NCP-APIGW-API-KEY-ID=aa"> 
 	로 HTML에 기입하면 해당 위도와 경도로 표시한 지역이 나옵니다.
 	

2. 네이버 지도 api를 이용한 동적지도 

-> 네이버 정적지도는 RESTApi를 제공하는반면 동적지도는 Web JS에서 제공합니다. 즉, JS로 선언해 객체를 이용하여 지도를 불러들입니다.
      정적과 달리 동적지도는 위도와 경도를 지정후 해당 지역을 움직일 수 있냐는 차이점이 있습니다.
   https://navermaps.github.io/maps.js.ncp/    -> 해당사이트를 통해 사용법에 관해 적혀있습니다.
       
       간단한 사용법 
   <div id="mapDiv"></div>
   
   <script src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=YOUR_CLIENT_ID&callback=initMap"></script>
   <script>
   		
   		var map = null;
   		function initMap(){ //비동기식으로 맵을 호출할 수 있습니다.
   			map = new naver.maps.Map('mapDiv',{             //new 연산자로 해당 객체생성하는데 naver.maps.Map() 클래스는 지도를 생성할 수 있습니다.
   				center: new naver.maps.LatLng(37.3595704, 127.105399),
   				zoom:10
   			});
   		}
   </script>
 	
 
 	
2. 네이버 아이디로 로그인

-> 네이버 아이디로 로그인(이하 네아로) API를 제작하는 과정중, API를 사용할 수 있게 신청한 아이디 이외에 다른 아이디로 로그인을 하려했을때 
   "입력하신 아이디로 로그인할 수 없습니다. 현재 LoginAPI은 개발 중 상태입니다. 개발 중 상태에서는 등록된 아이디만 로그인할 수 있습니다." 라는 
       오류가 발생하였습니다. 즉, 내가 웹사이트를 개발하여 네아로API를 적용시켰을때 다른 클라이언트들이 사용을 못하는 상황이 발생될 수 있다 느꼈습니다.
       이러한 문제의 원인은 네아로의 운영원칙에 있었습니다.
   "네이버는 등록되지 않은 임의의 앱(사이트)에서 네이버 아이디로 로그인을 제공하는 것을 제한하고 있습니다" 라는 운영원칙에 의해 내가 만든 웹사이트를 검수 후
       통과가 될 경우에 내 아이디 뿐만아니라 다른 아이디로 로그인을 할 수 있습니다.
       


3. @RestController에서 리다이렉트 시키는법

-> @Controller에서 리다이렉트를 시키는법은 return 부분에 그냥 뷰페이지 이름대신 "redirect:뷰페이지위치" 이렇게 한다.
      하지만 Controller와 다르게 RestController는 뷰페이지를 반환 시키는것이 아닌 데이터를 반환시키고자하는 컨트롤러이므로 똑같이 한다면 페이지대신
   "redirect:뷰페이지위치"만이 출력이된다. 따라서 다음과 같이 해야 리다이렉트가 가능하다.
   
   ex) @GetMapping("/rediect")
       public ResponseEntity<?> howToRedirect(){
       	
       	HttpHeaders headers = new HttpHeaders();
       	headers.setLocation(URI.create("이동하고자 할 뷰페이지"));
       	
       	return new ResponseEntity(headers, HttpStatus.MOVED_PERMANENTLY);
       }
       
       
   
4. 로그인 jsp에서 아이디랑 비밀번호를 폼에 담아 컨트롤러에 옮기는와중 400에러

-> 액션할 컨트롤러부분에 파라미터값을 잘못넣어 400에러가 발생되었다. 나의 경우 users테이블에 id컬럼은 숫자인데 jsp에서 받아온 값이 문자열이라 
	읽어들이는 와중에 에러가 났다.
	
	
5. HttpSessionListener를 사용하는 방법 :

-> 먼저 HttpSessionListener란? 요청이들어오면 응답만해주고 사라지는 HttpSession과 달리 세션이 생성될때 
      이벤트처리와 사라질때(로그아웃해서 사라지거나 브라우저를 닫았을때) 이벤트처리를 할 수 있어 세심하게 컨트롤 할 수 있습니다.
      따라서 중복로그인처리와 방문자정보를 저장하거나, 방문자수를 조회하는등 다양한 처리가 가능합니다.
      
   HttpSessionListener를 사용하는 방법에는 2가지가있습니다. 우선, 첫번째 방법이나 두번째 방법을 사용하기전, 
   HttpSessionLisetener인터페이스를 사용할 수 있는 라이브러리를 다운받아야합니다. pom.xml파일에  Servlet 3.0버전 이상인 경우로 업그레이드를 
      시켜줘야만 해당 인터페이스를 사용가능합니다. 만약 업그레이드가 되어있지않거나 포함이 되지 않았다면
      
   		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		
	다음과 같이 디펜던시를 추가하거나 수정하면됩니다. 그리고 나서 메이븐 업데이트를 하면 javax.servlet.api-3.1.0.jar 파일이 생깁니다.
	javax.servlet.http 패키지안에 HttpSessionListener이라는 인터페이스가 생겼다면 다음 2가지 방법중 하나를 이용하여 사용할 수 있습니다.
   
5-1)  어노테이션을 활용한 방법

      어노테이션이란 @를 이용하는 방법입니다. 예를들어 @GetMapping, @Controller, @Autowired 등이 있습니다.
      이처럼 어노테이션을 활용해 사용하고자하는 HttpSessionListener를 사용하고 하는 java파일에 명시를 해주면됩니다.
      예를들어, 필자는 컨트롤러 패키지안에 SessionHandler.java 파일에 HttpSessionListener를 사용하고 하면, 
      해당 자바파일에 @WebListener를 선언해주면 됩니다.
      
      -> ex)	@WebListener
      			public class SessionHandler implements HttpSessionListener{
      				//여기안에는 HttpSessionListener을 오버라이딩받아 재선언해주면됩니다.
      			}
      			
5-2)  web.xml에 명시해주는방법

	두번째 방법으론 web.xml에 명시하는 방법이 있습니다. 내가 HttpSessionListener를 사용하고자하는 파일을 web.xml에 명시하면됩니다.
	하는 방법은 다음과 같습니다. 컨트롤러 패키지안에 SessionHandler.java 파일에 HttpSessionListener를 사용하고 한다면,
	
	<listener>
		<listener-class>패키지명.파일명</listener-class>   // 해당필자의 패키지명은 net.daum.controller이고 파일명은 SessionHandler입니다.
	</listener>
	
	즉, ( 패키지명.파일명 ) 자리에 net.daum.controller.SessionHandler 라고 작성해주면 해당파일에 HttpSessionListener를 연결해 줄 수 있습니다.



6.  JPA vs MyBatis

	1. JPA,MyBatis 등장배경
	
	기존의 JDBC(Java Database Connectivity)를 사용했을 때는 sql문이 코드에 섞여 있었고 만들어 요청하는 과정에서 sql문 생성시 String을 붙이고
	자르는 등의 작업이 필요해서 sql문이 조금만 길어져도 번거롭고 관리도 힘들었다. 따라서 코드와 sql문을 분리해서 관리하기위해 JPA와 MyBatis가 등장하였다.
	
	
	2. MyBatis란?
	
	2-1. SQL 실행결과를 자바 Beans 또는 Map 객체에 매핑해주는 Persistence 솔루션으로  관리한다. SQL을 소스 코드가 아닌 XML로 분리한다.
	2-2. SQL문과 프로그래밍 코드를 분리해서 구현한다.
	2-3. 데이터소스 기능과 트랜잭션 처리 기능을 제공한다.
	
	
	3. MyBatis 장점
	
	3-1. 접근이 쉽고 코드가 간결하다.(배우기가 쉽다)
	3-2. SQL문과 프로그래밍 코드가 분리되어 있어서 SQL문에 변경이 있을때마다 자바 코드를 수정하거나 컴파일 하지 않아도 된다.
	3-3. 다양한 프로그래밍 언어로 구현이 가능하다. (이식성이 뛰어나다)
	
	
	4. MyBatis 단점
	
	4-1. 스키마 변경시 SQL 쿼리를 직접 수정해야한다.
	4-2. 반복된 쿼리가 발생하여 반복 작업이 있다.
	4-3. 쿼리를 직접 작성하기 때문에 데이터베이스에 종속된 쿼리문이 발생할 수 있다.
	4-4. 데이터베이스 변경시 로직도 수정해줘야한다.
	
	
	5. JPA(Java Persistence API)란? 
	
	JAVA ORM 기술에 대한 API 표준명세이다. 구현된 클래스와 매핑을 해주기 위해 사용되는 프레임워크이다.
	-ORM (Object-Relational Mapping) : Class와 RDB(Relational DataBase)의 테이블을 매핑한다는 뜻. 객체를 RDB테이블에 자동으로 영속화 해주는것
	구현체로는 Hibernate, EclipseLink, Data Nucleus가 있으며 Hibernate가 가장 대중적이다.
	
	
	6. JPA 장점
	
	6-1. 쿼리를 하나하나 작성할 필요가 없다. 코드량이 줄어든다.
	6-2. 가독성이 좋다.
	6-3. 간편하게 수정이 가능하다. (유지보수, 리팩토링 용이)
	6-4. 동일한 쿼리에 대한 캐시 기능을 사용하기 떄문에 더욱 높은 성능을 낼 수 있다.
	
	
	7. JPA 단점
	
	7-1. 매핑 설계를 잘못했을 때 성능 저하가 발생할 수 있다.
	7-2. JPA를 제대로 사용하려면 알아야할 것이 많아서 학습하는데 시간이 오래 걸린다.
	7-3. 다수의 테이블 조인시 신경써야 할게 많다.
	
	
	8. JPA vs Mybatis
	
	결론적으로, JPA는 객체 중심의 개발 방식을 지원하며, 개발자가 직접 SQL을 작성하지않고도 객체를 관리할 수 있다는 장점이 있고, MyBatis는 SQL을 
	직접 작성할 수 있어, 개발자가 더욱 자유롭게 데이터베이스를 다룰 수 있다는 장점이 있다. 따라서, 프로젝트 목적과 상황에 따라 적절한 ORM 기술을 선택해야한다.
	
	
7. 	
	
	
	

   

       

 	